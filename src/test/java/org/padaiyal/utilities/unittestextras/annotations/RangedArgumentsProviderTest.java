package org.padaiyal.utilities.unittestextras.annotations;

import java.lang.annotation.Annotation;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;


/**
 * Test RangedSource annotation and RangedArgumentsProvider.
 */
public class RangedArgumentsProviderTest {

  /**
   * Tests integer range by increasing the number by 6 and starting from numbers larger than 0.
   *
   * @param number The number generated by the ranged source annotation.
   */
  @ParameterizedTest
  @RangedSource(start = 24, end = 100, step = 6)
  public void testIntegerRangedSourcePositiveMinDivisibleBy6(int number) {
    Assertions.assertTrue(number > 0);
    Assertions.assertEquals(0, number % 6);
  }

  /**
   * Tests integer range by increasing the number by 2 and starting from 0.
   *
   * @param number The number generated by the ranged source annotation.
   */
  @ParameterizedTest
  @RangedSource(start = 0, end = 100, step = 2)
  public void testIntegerRangedSourcePositiveMinDivisibleBy2(int number) {
    Assertions.assertTrue(number >= 0);
    Assertions.assertEquals(0, number % 2);
  }

  /**
   * Tests long range by increasing the number by 2 and starting from 0.
   *
   * @param number The number generated by the ranged source annotation.
   */
  @ParameterizedTest
  @RangedSource(type = NumericType.LONG, start = 0, end = 100, step = 2)
  public void testLongRangedSourcePositiveMinDivisibleBy2(long number) {
    Assertions.assertTrue(number >= 0);
    Assertions.assertEquals(0, number % 2);
  }

  /**
   * Tests float range by increasing the number by 1.5 and starting from 0.
   *
   * @param number The number generated by the ranged source annotation.
   */
  @ParameterizedTest
  @RangedSource(type = NumericType.FLOAT, start = 0, end = 100, step = 1.5)
  public void testFloatRangedSourcePositiveMinDivisibleByOneAndHalf(float number) {
    Assertions.assertTrue(number >= 0);
    Assertions.assertEquals(0, number % 1.5);
  }

  /**
   * Tests double range by increasing the number by 1.5 and starting from 0.
   *
   * @param number The number generated by the ranged source annotation.
   */
  @ParameterizedTest
  @RangedSource(type = NumericType.DOUBLE, start = 0, end = 100, step = 1.5)
  public void testDoubleRangedSourcePositiveMinDivisibleByOneAndHalf(double number) {
    Assertions.assertTrue(number >= 0);
    Assertions.assertEquals(0, number % 1.5);
  }

  /**
   * Tests integer range by decreasing the number by 6 and starting from numbers lesser than 0.
   *
   * @param number The number generated by the ranged source annotation.
   */
  @ParameterizedTest
  @RangedSource(start = -24, end = -100, step = -6)
  public void testNegativeIntegerRangedSourcePositiveMinDivisibleBy6(int number) {
    Assertions.assertTrue(number < 0);
    Assertions.assertEquals(0, number % -6);
  }

  /**
   * Tests integer range by decreasing the number by 2 and starting from 0.
   *
   * @param number The number generated by the ranged source annotation.
   */
  @ParameterizedTest
  @RangedSource(start = 0, end = -100, step = -2)
  public void testNegativeIntegerRangedSourcePositiveMinDivisibleBy2(int number) {
    Assertions.assertTrue(number <= 0);
    Assertions.assertEquals(0, number % -2);
  }

  /**
   * Tests long range by decreasing the number by 2 and starting from 0.
   *
   * @param number The number generated by the ranged source annotation.
   */
  @ParameterizedTest
  @RangedSource(type = NumericType.LONG, start = 0, end = -100, step = -2)
  public void testNegativeLongRangedSourcePositiveMinDivisibleBy2(long number) {
    Assertions.assertTrue(number <= 0);
    Assertions.assertEquals(0, number % -2);
  }

  /**
   * Tests float range by decreasing the number by 1.5 and starting from 0.
   *
   * @param number The number generated by the ranged source annotation.
   */
  @ParameterizedTest
  @RangedSource(type = NumericType.FLOAT, start = 0, end = -100, step = -1.5)
  public void testNegativeFloatRangedSourcePositiveMinDivisibleByOneAndHalf(float number) {
    Assertions.assertTrue(number <= 0);
    Assertions.assertEquals(0, Math.abs(number % -1.5));
  }

  /**
   * Tests double range by decreasing the number by 1.5 and starting from 0.
   *
   * @param number The number generated by the ranged source annotation.
   */
  @ParameterizedTest
  @RangedSource(type = NumericType.DOUBLE, start = 0, end = -100, step = -1.5)
  public void testNegativeDoubleRangedSourcePositiveMinDivisibleByOneAndHalf(double number) {
    Assertions.assertTrue(number <= 0);
    Assertions.assertEquals(0, Math.abs(number % -1.5));
  }

  /**
   * Tests creating annotation when end is smaller than start range when the step is positive.
   */
  @Test
  public void testInvalidAnnotation() {
    RangedSource source = new RangedSource() {
      @Override
      public Class<? extends Annotation> annotationType() {
        return null;
      }

      @Override
      public double start() {
        return 500.4;
      }

      @Override
      public double end() {
        return 10.0;
      }

      @Override
      public double step() {
        return 1;
      }

      @Override
      public NumericType type() {
        return NumericType.DOUBLE;
      }
    };

    RangedArgumentsProvider rangedArgumentsProvider = new RangedArgumentsProvider();
    Assertions.assertThrows(
        IllegalArgumentException.class,
        () -> rangedArgumentsProvider.accept(source));
  }

}
